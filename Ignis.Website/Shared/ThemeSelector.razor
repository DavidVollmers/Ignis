@using System.Text.Json
@inherits IgnisAsyncComponentBase
@* ReSharper disable once InconsistentNaming *@
@inject IJSRuntime JSRuntime
@inject ILocalStorage LocalStorage
@inject IStringLocalizer<ThemeSelector> Resources

<Listbox AsElement="div"
         @bind-Value="SelectedTheme"
         @attributes="AdditionalAttributes">
    <ListboxLabel class="sr-only">
        @Resources["Label"]
    </ListboxLabel>
    <ListboxButton class="flex h-6 w-6 items-center justify-center rounded-lg shadow-md shadow-black/5 ring-1 ring-black/5 dark:bg-slate-700 dark:ring-inset dark:ring-white/5"
                   aria-label="@Resources["Theme_" + SelectedTheme]">
        <ThemeLightIcon class="hidden h-4 w-4 fill-sky-400 [[data-theme='1']_&]:block"/>
        <ThemeDarkIcon class="hidden h-4 w-4 fill-sky-400 [[data-theme='2']_&]:block"/>
        <ThemeLightIcon class="hidden h-4 w-4 fill-slate-400 [:not(.dark)[data-theme='0']_&]:block"/>
        <ThemeDarkIcon class="hidden h-4 w-4 fill-slate-400 [.dark[data-theme='0']_&]:block"/>
    </ListboxButton>
    <ListboxOptions class="absolute left-1/2 top-full mt-3 w-36 -translate-x-1/2 space-y-1 rounded-xl bg-white p-3 text-sm font-medium shadow-md shadow-black/5 ring-1 ring-black/5 dark:bg-slate-800 dark:ring-white/5">
        @foreach (var theme in Enum.GetValues<Theme>())
        {
            <ListboxOption @key="theme"
                           Value="theme"
                           AsComponent="typeof(Fragment)">
                <_ Context="option">
                    <li @attributes="option.Attributes" class="@Css.Class("flex cursor-pointer select-none items-center rounded-[0.625rem] p-1", ("text-sky-500", option.IsSelected), ("text-slate-900 dark:text-white", option.IsActive && !option.IsSelected), ("text-slate-700 dark:text-slate-400", !option.IsActive && !option.IsSelected), ("bg-slate-100 dark:bg-slate-900/40", option.IsActive))">
                        <div class="rounded-md bg-white p-1 shadow ring-1 ring-slate-900/5 dark:bg-slate-700 dark:ring-inset dark:ring-white/5">
                            <Dynamic AsComponent="GetThemeIcon(theme)"
                                     class="@Css.Class("h-4 w-4", option.IsSelected ? "fill-sky-400 dark:fill-sky-400" : "fill-slate-400")">
                            </Dynamic>
                        </div>
                        <div class="ml-3">
                            @Resources["Theme_" + theme]
                        </div>
                    </li>
                </_>
            </ListboxOption>
        }
    </ListboxOptions>
</Listbox>

@code
{
    private Theme _selectedTheme;

    private Theme SelectedTheme
    {
        get => _selectedTheme;
        set
        {
            _selectedTheme = value;
            JSRuntime.InvokeVoidAsync("setTheme", JsonSerializer.Serialize(value));
        }
    }

    [Parameter(CaptureUnmatchedValues = true)]
    public IReadOnlyDictionary<string, object?>? AdditionalAttributes { get; set; }

    protected override async Task OnInitializedAsync(CancellationToken cancellationToken)
    {
        _selectedTheme = await LocalStorage.GetItemAsync<Theme?>("theme") ?? Theme.System;
    }

    private Type GetThemeIcon(Theme theme)
    {
        return _selectedTheme switch
        {
            Theme.Light => typeof(ThemeLightIcon),
            Theme.Dark => typeof(ThemeDarkIcon),
            _ => typeof(ThemeSystemIcon)
            };
    }

    private enum Theme
    {
        System,
        Light,
        Dark
    }
}