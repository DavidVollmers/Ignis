@using Ignis.Website.Services
@using Ignis.Markdown.Processor.Contracts
@inherits IgnisComponentBase
@inject NavigationManager Router
@inject IPageService PageService

<nav class="@Css.Class("text-base lg:text-sm", CssClass!)">
    <ul role="list" class="space-y-9">
        @foreach (var item in _sections)
        {
            <li @key="item.Title">
                <h2 class="font-display font-medium text-slate-900 dark:text-white">
                    @item.Title
                </h2>
                <ul role="list"
                    class="mt-2 space-y-2 border-l-2 border-slate-100 dark:border-slate-800 lg:mt-4 lg:space-y-4 lg:border-slate-200">
                    @foreach (var link in item.Links)
                    {
                        var isCurrentPage = '/' + Router.ToBaseRelativePath(Router.Uri) == link.Link;
                        <li @key="link.Link" class="relative">
                            <a href="@link.Link"
                               class="@Css.Class("block w-full pl-3.5 before:pointer-events-none before:absolute before:-left-1 before:top-1/2 before:h-1.5 before:w-1.5 before:-translate-y-1/2 before:rounded-full", isCurrentPage ? "font-semibold text-sky-500 before:bg-sky-500" : "text-slate-500 before:hidden before:bg-slate-300 hover:text-slate-600 hover:before:block dark:text-slate-400 dark:before:bg-slate-700 dark:hover:text-slate-300")">
                                @link.Title
                            </a>
                        </li>
                    }
                </ul>
            </li>
        }
    </ul>
</nav>

@code
{
    private Section[] _sections = Array.Empty<Section>();

    [Parameter(CaptureUnmatchedValues = true)]
    public IReadOnlyDictionary<string, object?>? AdditionalAttributes { get; set; }

    private string? CssClass => AdditionalAttributes?.TryGetValue("class", out var cssClass) == true && cssClass is string value ? value : null;

    protected override void OnInitialized()
    {
        _sections = PageService.GetSections();
    }
}