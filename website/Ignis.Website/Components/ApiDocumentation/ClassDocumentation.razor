@using LoxSmoke.DocXml
@using System.Reflection
@using System.Text
@using System.Web
@inherits IgnisComponentBase
@inject IStringLocalizer<ClassDocumentation> Resources

<h2>
    @Type.SanitizeTypeName()
</h2>

@if (IsComponent)
{
    <a href="/api/@(HttpUtility.UrlEncode(Type.AssemblyQualifiedName))/_">
        @Resources["ViewApiReference"]
    </a>
}

<h3>
    @Resources["DefinitionHeading"]
</h3>
<dl class="flex gap-x-2">
    <dt>
        @Resources["NamespaceLabel"]:
    </dt>
    <dd>
        @Type.Namespace
    </dd>
</dl>

@if (_typeComments != null)
{
    <p>
        @_typeComments.Summary
    </p>
}

<pre class="whitespace-normal"><code class="language-csharp">
@GetTypeDefinition(Type)
</code></pre>

@if (Type.GenericTypeParameters.Any())
{
    <h4>
        @Resources["TypeParametersHeading"]
    </h4>

    @foreach (var typeParam in Type.GenericTypeParameters)
    {
        <p>
            <code>@typeParam.Name</code>
        </p>
    }
}

@if (!IsComponent && Type.DeclaredConstructors.Any())
{
    <h4>
        @Resources["ConstructorsHeading"]
    </h4>

    <table>
        <thead>
        <tr>
            <td></td>
            <td></td>
        </tr>
        </thead>
        <tbody>
        @foreach (var ctor in Type.DeclaredConstructors)
        {
            var methodComments = _reader!.GetMethodComments(ctor);
            <tr>
                <td>
                    <code>@GetConstructorDefinition(ctor)</code>
                </td>
                <td>
                    @methodComments.Summary
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code
{
    private DocXmlReader? _reader;
    private TypeComments? _typeComments;

    [Parameter, EditorRequired]
    public TypeInfo Type { get; set; } = null!;

    [Parameter]
    public bool IsComponent { get; set; }

    protected override void OnInitialized()
    {
        _reader = new DocXmlReader(new[] { Type.Assembly });

        _typeComments = _reader.GetTypeComments(Type);
    }

    private string GetTypeDefinition(TypeInfo type)
    {
        var builder = new StringBuilder();
        builder.Append("public");

        if (type is { IsAbstract: true, IsSealed: true }) builder.Append(" static");
        else if (type.IsAbstract) builder.Append(" abstract");
        else if (type.IsSealed) builder.Append(" sealed");

        if (type.IsClass) builder.Append(" class");
        else if (type.IsEnum) builder.Append(" enum");
        else if (type.IsInterface) builder.Append(" interface");
        else if (type.IsValueType) builder.Append(" struct");

        builder.Append(' ');
        builder.Append(type.SanitizeTypeName());

        var types = new List<string>();

        if (type.BaseType != null && type.BaseType != typeof(object))
        {
            types.Add(type.BaseType.GetTypeInfo().SanitizeTypeName(true));
        }

        if (type.ImplementedInterfaces.Any())
        {
            types.AddRange(type.ImplementedInterfaces.Select(i => i.GetTypeInfo().SanitizeTypeName(true)));
        }

        if (types.Any())
        {
            builder.Append(" : ");
            builder.Append(string.Join(", ", types));
        }

        return builder.ToString();
    }

    public string GetConstructorDefinition(ConstructorInfo ctor)
    {
        var definition = new StringBuilder();
        definition.Append(Type.SanitizeTypeName());
        definition.Append("(");

        var parameter = ctor.GetParameters();
        foreach (var param in parameter)
        {
            definition.Append(param.ParameterType.GetTypeInfo().SanitizeTypeName());
            definition.Append(" ");
            definition.Append(param.Name);

            if (param.HasDefaultValue)
            {
                definition.Append(" = ");
                definition.Append(param.DefaultValue);
            }
            if (param != parameter.Last())
            {
                definition.Append(", ");
            }
        }

        definition.Append(")");

        return definition.ToString();
    }
}