@using System.Reflection
@using System.ComponentModel
@using Doki
@inherits TypeDocumentationBase
@inject IStringLocalizer<ComponentDocumentation> Resources

<h2>
    @TypeDocumentation.Name
</h2>

@{
    object? instance = null;

    <a href="@Type.GetTypeDocumentationLink()">
        @Resources["ViewApiReference"]
    </a>

    var parameterProperties = Type.GetProperties(BindingFlags.Instance | BindingFlags.Public).Where(p => p.GetCustomAttribute<ParameterAttribute>() != null).ToArray();
    if (parameterProperties.Any())
    {
        <table>
            <thead>
            <tr class="text-white">
                <td class="py-2 pl-4 text-sm font-medium sm:pl-0">
                    @Resources["ParameterHeading"]
                </td>
                <td class="py-2 pl-4 text-sm font-medium">
                    @Resources["DefaultHeading"]
                </td>
                <td class="py-2 pl-4 text-sm font-medium">
                    @Resources["DescriptionHeading"]
                </td>
            </tr>
            </thead>
            <tbody>
            @foreach (var prop in parameterProperties)
            {
                var memberDocumentation = TypeDocumentation.Properties.FirstOrDefault(p => p.Name == prop.Name);
                var isEvent = prop.PropertyType.IsGenericType && prop.PropertyType.GetGenericTypeDefinition() == typeof(EventCallback<>) || prop.PropertyType == typeof(EventCallback);
                var isSlot = prop.PropertyType.IsGenericType && prop.PropertyType.GetGenericTypeDefinition() == typeof(RenderFragment<>) || prop.PropertyType == typeof(RenderFragment);
                <tr>
                    <td>
                        <code>@prop.Name</code>
                        @if (isEvent)
                        {
                            <span class="inline-flex items-center rounded-md bg-pink-400/10 px-2 py-1 text-xs font-medium text-pink-400 ring-1 ring-inset ring-pink-400/20 ml-2">
                                @Resources["EventCallback"]
                            </span>
                        }
                        @if (isSlot)
                        {
                            <span class="inline-flex items-center rounded-md bg-indigo-400/10 px-2 py-1 text-xs font-medium text-indigo-400 ring-1 ring-inset ring-indigo-400/30 ml-2">
                                @Resources["RenderFragment"]
                            </span>
                        }
                    </td>
                    <td>
                        @{
                            var defaultValue = prop.GetCustomAttribute<DefaultValueAttribute>()?.Value;
                            if (defaultValue == null && !isEvent && !isSlot)
                            {
                                if (Type.ContainsGenericParameters)
                                {
                                    var type = Type.MakeGenericType(Type.GetGenericArguments().Select(t => typeof(object)).ToArray());
                                    instance ??= Activator.CreateInstance(type);
                                    defaultValue = type.GetProperty(prop.Name)?.GetValue(instance);
                                }
                                else
                                {
                                    instance ??= Activator.CreateInstance(Type);
                                    defaultValue = prop.GetValue(instance);
                                }
                            }
                        }
                        @if (defaultValue != null)
                        {
                            <code>@defaultValue</code>
                        }
                        else
                        {
                            <span>—</span>
                        }
                    </td>
                    <td>
                        @memberDocumentation?.Summary?.ToMarkupString()
                    </td>
                </tr>
            }
            </tbody>
        </table>
    }
}