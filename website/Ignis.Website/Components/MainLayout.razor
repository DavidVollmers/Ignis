@using Ignis.Website.Services
@using Ignis.Markdown.Processor.Contracts
@using System.Reflection
@inherits IgnisComponentBase
@implements IHandleAfterRender
@inject NavigationManager Router
@inject IPageService PageService
@inject IStringLocalizer<CommonResources> CommonResources
@* ReSharper disable once InconsistentNaming *@
@inject IJSRuntime JSRuntime

<PageTitle>
    @CommonResources["WebsiteTitle"] - @_page?.Title
</PageTitle>

<MainHeader/>

@if (_link == "/")
{
    <Hero/>
}

<div class="relative mx-auto flex max-w-8xl justify-center sm:px-2 lg:px-8 xl:px-12">
    <div class="hidden lg:relative lg:block lg:flex-none">
        <div class="absolute inset-y-0 right-0 w-[50vw] bg-slate-50 dark:hidden"></div>
        <div class="absolute bottom-0 right-0 top-16 hidden h-12 w-px bg-gradient-to-t from-slate-800 dark:block"></div>
        <div class="absolute bottom-0 right-0 top-28 hidden w-px bg-slate-800 dark:block"></div>
        <div class="sticky top-[4.5rem] -ml-0.5 h-[calc(100vh-4.5rem)] w-64 overflow-y-auto overflow-x-hidden py-16 pl-0.5 pr-8 xl:w-72 xl:pr-16">
            <Navigation/>
        </div>
    </div>
    @if (_section != null && _page != null)
    {
        <div class="min-w-0 max-w-2xl flex-auto px-4 py-16 lg:max-w-none lg:pl-8 lg:pr-0 xl:px-16">
            <article>
                <header class="mb-9 space-y-1">
                    <p class="font-display text-sm font-medium text-sky-500">
                        @_section.Title
                    </p>
                    <h1 class="font-display text-3xl tracking-tight text-slate-900 dark:text-white">
                        @_page.Title
                    </h1>
                </header>
                @if (_page.Inject != null)
                {
                    <Prose>
                        <p>
                            @_page.Inject.Description
                        </p>
                    </Prose>
                    @if (_injectType != null)
                    {
                        <Dynamic AsComponent="_injectType"/>
                    }
                }
                @if (_content != null)
                {
                    <Prose>
                        @((MarkupString)_content)
                    </Prose>
                    
                    <br/>
                    <br/>
                }
                @if (_page.ApiTypeNames != null)
                {
                    <Prose>
                        <h2>
                            @CommonResources["ApiReferenceHeading"]
                        </h2>

                        @foreach (var typeName in _page.ApiTypeNames)
                        {
                            var type = Type.GetType(typeName)?.GetTypeInfo();
                            if (type == null) continue;

                            <ApiDocumentation @key="typeName" Type="type"/>
                        }
                    </Prose>
                }
            </article>
        </div>
    }
</div>

@Body

<DialogOutlet />

@code
{
    private Section? _section;
    private string? _content;
    private string? _link;
    private Page? _page;
    private Type? _injectType;

    [Parameter]
    public RenderFragment? Body { get; set; }

    protected override void OnInitialized()
    {
        LoadPage();
    }
    
    private void LoadPage()
    {
        _link = ('/' + Router.ToBaseRelativePath(Router.Uri)).Split('#')[0];

        _section = PageService.GetSectionByLink(_link);

        if (_section == null) return;

        _page = _section?.Links.FirstOrDefault(s => s.Link == _link);

        if (_page == null) return;

        _content = PageService.GetPageContent(_page);

        if (_page.Inject == null) return;

        _injectType = Type.GetType(_page.Inject.TypeName);
    }

    public async Task OnAfterRenderAsync()
    {
        await JSRuntime.InvokeVoidAsync("OnPageLoad");
    }
}
