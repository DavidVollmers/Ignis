@page "/"
@page "/docs"
@page "/docs/{*path}"
@using Ignis.Website.Services
@using Ignis.Markdown.Processor.Contracts
@using System.Reflection
@inherits Ignis.Components.IgnisAsyncComponentBase
@implements IHandleAfterRender
@* ReSharper disable once InconsistentNaming *@
@inject IJSRuntime JSRuntime
@inject NavigationManager Router
@inject IPageService PageService
@inject IStringLocalizer<CommonResources> CommonResources

<PageTitle>
    @CommonResources["WebsiteTitle"] - @_page?.Title
</PageTitle>

@if (_section != null && _page != null)
{
    <header class="mb-9 space-y-1">
        <p class="font-display text-sm font-medium text-sky-500">
            @_section.Title
        </p>
        <h1 class="font-display text-3xl tracking-tight text-slate-900 dark:text-white">
            @_page.Title
        </h1>
    </header>
    @if (_page.Inject != null)
    {
        <Prose>
            <p>
                @_page.Inject.Description
            </p>
        </Prose>
        @if (_injectType != null)
        {
            <Dynamic AsComponent="_injectType"/>
        }
    }
    @if (_content != null)
    {
        <Prose>
            @((MarkupString)_content)
        </Prose>

        <br/>
        <br/>
    }
    @if (_page.ApiTypeNames != null)
    {
        <Prose>
            <h2>
                @CommonResources["ApiReferenceHeading"]
            </h2>

            @foreach (var typeName in _page.ApiTypeNames)
            {
                var type = Type.GetType(typeName)?.GetTypeInfo();
                if (type == null) continue;

                <ClassDocumentation @key="typeName" Type="type" IsComponent/>
            }
        </Prose>
    }
}

@code
{
    private Section? _section;
    private string? _content;
    private Page? _page;
    private Type? _injectType;

    [Parameter]
    public string? Path { get; set; }

    protected override async Task OnInitializedAsync(CancellationToken cancellationToken)
    {
        await LoadPageAsync(cancellationToken);
    }

    protected override async Task OnUpdatedAsync(CancellationToken cancellationToken)
    {
        await LoadPageAsync(cancellationToken);
    }

    private async Task LoadPageAsync(CancellationToken cancellationToken)
    {
        var link = ('/' + Router.ToBaseRelativePath(Router.Uri)).Split('#')[0];
        if (link.StartsWith("/docs")) link = link["/docs".Length..];

        _section = await PageService.GetSectionByLinkAsync(link, cancellationToken);

    //TODO NotFound
        if (_section == null) return;

        _page = _section?.Links.FirstOrDefault(s => s.Link == link);

    //TODO NotFound
        if (_page == null) return;

        _content = await PageService.GetPageContentAsync(_page, cancellationToken);

        if (_page.Inject == null) return;

        _injectType = Type.GetType(_page.Inject.TypeName);
    }

    public async Task OnAfterRenderAsync()
    {
        await JSRuntime.InvokeVoidAsync("OnPageLoad");
    }
}