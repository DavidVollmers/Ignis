@using Ignis.Components
@using Ignis.Components.HeadlessUI
@using Ignis.Components.HeroIcons.Solid
@using Ignis.Utils
@using Microsoft.AspNetCore.Components.Rendering
@using System.Text

<div class="absolute top-16 w-full max-w-sm px-4">
    <Popover class="relative" Context="popover">
        <PopoverButton class="@Css.Class("group inline-flex items-center rounded-md bg-orange-700 px-3 py-2 text-base font-medium text-white hover:text-opacity-100 focus:outline-none focus-visible:ring-2 focus-visible:ring-white focus-visible:ring-opacity-75", ("text-opacity-90", !popover.IsOpen))">
            <span>Solutions</span>
            <ChevronDownIcon class="@Css.Class("ml-2 h-5 w-5 text-orange-300 transition duration-150 ease-in-out group-hover:text-opacity-80", ("text-opacity-70", !popover.IsOpen))"/>
        </PopoverButton>
        <Transition AsComponent="typeof(Fragment)"
                    Enter="transition ease-out duration-200"
                    EnterFrom="opacity-0 translate-y-1"
                    EnterTo="opacity-100 translate-y-0"
                    Leave="transition ease-in duration-150"
                    LeaveFrom="opacity-100 translate-y-0"
                    LeaveTo="opacity-0 translate-y-1"
                    Context="transition">
            <PopoverPanel class="@Css.Class("absolute left-1/2 z-10 mt-3 w-full max-w-sm -translate-x-1/2 transform px-4 sm:px-0 lg:max-w-3xl", transition)">
                <div class="overflow-hidden rounded-lg shadow-lg ring-1 ring-black ring-opacity-5">
                    <div class="relative grid gap-8 bg-white p-7">
                        @foreach (var solution in _solutions)
                        {
                            <a @key="solution.Name"
                               href="@solution.HRef"
                               class="-m-3 flex items-center rounded-lg p-2 transition duration-150 ease-in-out hover:bg-gray-50 focus:outline-none focus-visible:ring focus-visible:ring-orange-500 focus-visible:ring-opacity-50">
                                <div class="flex h-10 w-10 shrink-0 items-center justify-center text-white sm:h-12 sm:w-12">
                                    <Dynamic AsComponent="solution.Icon"/>
                                </div>
                                <div class="ml-4">
                                    <p class="text-sm font-medium text-gray-900">
                                        @solution.Name
                                    </p>
                                    <p class="text-sm text-gray-500">
                                        @solution.Description
                                    </p>
                                </div>
                            </a>
                        }
                    </div>
                    <div class="bg-gray-50 p-4">
                        <a href="##"
                           class="flow-root rounded-md px-2 py-2 transition duration-150 ease-in-out hover:bg-gray-100 focus:outline-none focus-visible:ring focus-visible:ring-orange-500 focus-visible:ring-opacity-50">
                            <span class="flex items-center">
                                <span class="text-sm font-medium text-gray-900">
                                    Documentation
                                </span>
                            </span>
                            <span class="block text-sm text-gray-500">
                                Start integrating products and tools
                            </span>
                        </a>
                    </div>
                </div>
            </PopoverPanel>
        </Transition>
    </Popover>
</div>

@code
{
    private readonly Solution[] _solutions =
    {
        new()
        {
            Name = "Insights",
            Description = "Measure actions your users take",
            HRef = "##",
            Icon = typeof(IconOne)
        },
        new()
        {
            Name = "Automations",
            Description = "Create your own targeted content",
            HRef = "##",
            Icon = typeof(IconTwo)
        },
        new()
        {
            Name = "Reports",
            Description = "Keep track of your growth",
            HRef = "##",
            Icon = typeof(IconThree)
        }
    };

    private class Solution
    {
        public string Name { get; set; } = null!;

        public string Description { get; set; } = null!;

        public string HRef { get; set; } = null!;

        public Type Icon { get; set; } = null!;
    }

    // Normally these would be in their own .razor files
    private class IconOne : IgnisRigidComponentBase
    {
        protected override void BuildRenderTree(RenderTreeBuilder builder)
        {
            var svg = new StringBuilder();
            svg.Append(@"<svg width=""48"" height=""48"" viewBox=""0 0 48 48"" fill=""none"" xmlns=""http://www.w3.org/2000/svg"" aria-hidden=""true"">");
            svg.Append(@"<rect width=""48"" height=""48"" rx=""8"" fill=""#FFEDD5"" />");
            svg.Append(@"<path d=""M24 11L35.2583 17.5V30.5L24 37L12.7417 30.5V17.5L24 11Z"" stroke=""#FB923C"" strokeWidth=""2""/>");
            svg.Append(@"<path fillRule=""evenodd"" clipRule=""evenodd"" d=""M16.7417 19.8094V28.1906L24 32.3812L31.2584 28.1906V19.8094L24 15.6188L16.7417 19.8094Z"" stroke=""#FDBA74"" strokeWidth=""2""/>");
            svg.Append(@"<path fillRule=""evenodd"" clipRule=""evenodd"" d=""M20.7417 22.1196V25.882L24 27.7632L27.2584 25.882V22.1196L24 20.2384L20.7417 22.1196Z"" stroke=""#FDBA74"" strokeWidth=""2""/>");
            svg.Append(@"</svg>");

            builder.AddMarkupContent(0, svg.ToString());
        }
    }

    // Normally these would be in their own .razor files
    private class IconTwo : IgnisRigidComponentBase
    {
        protected override void BuildRenderTree(RenderTreeBuilder builder)
        {
            var svg = new StringBuilder();
            svg.Append(@"<svg width=""48"" height=""48"" viewBox=""0 0 48 48"" fill=""none"" xmlns=""http://www.w3.org/2000/svg"" aria-hidden=""true"">");
            svg.Append(@"<rect width=""48"" height=""48"" rx=""8"" fill=""#FFEDD5""/>");
            svg.Append(@"<path d=""M28.0413 20L23.9998 13L19.9585 20M32.0828 27.0001L36.1242 34H28.0415M19.9585 34H11.8755L15.9171 27"" stroke=""#FB923C"" strokeWidth=""2""/>");
            svg.Append(@"<path fillRule=""evenodd"" clipRule=""evenodd"" d=""M18.804 30H29.1963L24.0001 21L18.804 30Z"" stroke=""#FDBA74"" strokeWidth=""2""/>");
            svg.Append(@"</svg>");

            builder.AddMarkupContent(0, svg.ToString());
        }
    }

    // Normally these would be in their own .razor files
    private class IconThree : IgnisRigidComponentBase
    {
        protected override void BuildRenderTree(RenderTreeBuilder builder)
        {
            var svg = new StringBuilder();
            svg.Append(@"<svg width=""48"" height=""48"" viewBox=""0 0 48 48"" fill=""none"" xmlns=""http://www.w3.org/2000/svg"">");
            svg.Append(@"<rect width=""48"" height=""48"" rx=""8"" fill=""#FFEDD5""/>");
            svg.Append(@"<rect x=""13"" y=""32"" width=""2"" height=""4"" fill=""#FDBA74""/>");
            svg.Append(@"<rect x=""17"" y=""28"" width=""2"" height=""8"" fill=""#FDBA74""/>");
            svg.Append(@"<rect x=""21"" y=""24"" width=""2"" height=""12"" fill=""#FDBA74""/>");
            svg.Append(@"<rect x=""25"" y=""20"" width=""2"" height=""16"" fill=""#FDBA74""/>");
            svg.Append(@"<rect x=""29"" y=""16"" width=""2"" height=""20"" fill=""#FB923C""/>");
            svg.Append(@"<rect x=""33"" y=""12"" width=""2"" height=""24"" fill=""#FB923C""/>");
            svg.Append(@"</svg>");
    
            builder.AddMarkupContent(0, svg.ToString());
        }
    }
}