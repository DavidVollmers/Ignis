@using Ignis.Components
@using Ignis.Components.HeadlessUI
@using Ignis.Components.HeroIcons.Solid
@using Ignis.Utils

@inherits IgnisComponentBase

<div class="fixed top-16 w-72">
    <Combobox @bind-Value="_selectedPerson">
        <div class="relative mt-1">
            <div class="relative w-full cursor-default overflow-hidden rounded-lg bg-white text-left shadow-md focus:outline-none focus-visible:ring-2 focus-visible:ring-white/75 focus-visible:ring-offset-2 focus-visible:ring-offset-teal-300 sm:text-sm">
                <ComboboxInput class="w-full border-none py-2 pl-3 pr-10 text-sm leading-5 text-gray-900 focus:ring-0"
                               ValueChanged="v => SetQuery(v)"
                               DisplayValue="p => p.Name"/>
                <ComboboxButton class="absolute inset-y-0 right-0 flex items-center pr-2">
                    <ChevronUpDownIcon class="h-5 w-5 text-gray-400"/>
                </ComboboxButton>
            </div>
            <Transition AsComponent="typeof(Fragment)"
                        Leave="transition ease-in duration-100"
                        LeaveFrom="opacity-100"
                        LeaveTo="opacity-0"
                        AfterLeave="() => SetQuery(string.Empty)"
                        Context="transition">
                <ComboboxOptions class="@Css.Class("absolute mt-1 max-h-60 w-full overflow-auto rounded-md bg-white py-1 text-base shadow-lg ring-1 ring-black/5 focus:outline-none sm:text-sm", transition)">
                    @if (FilteredPersons.Length == 0 && _query != string.Empty)
                    {
                        <div class="relative cursor-default select-none px-4 py-2 text-gray-700">
                            Nothing found.
                        </div>
                    }
                    else
                    {
                        foreach (var person in FilteredPersons)
                        {
                            <ComboboxOption @key="person.Name"
                                            AsComponent="typeof(Fragment)"
                                            Value="person"
                                            Context="option">
                                <li @ref="option.Element"
                                    @attributes="option.Attributes"
                                    class="@Css.Class("relative cursor-default select-none py-2 pl-10 pr-4", option.IsActive ? "bg-teal-600 text-white" : "text-gray-900")">
                                    <span class="@Css.Class("block truncate", option.IsSelected ? "font-medium" : "font-normal")">
                                        @person.Name
                                    </span>
                                    @if (option.IsSelected)
                                    {
                                        <span class="@Css.Class("absolute inset-y-0 left-0 flex items-center pl-3", option.IsActive ? "text-white" : "text-teal-600")">
                                            <CheckIcon class="h-5 w-5"/>
                                        </span>
                                    }
                                </li>
                            </ComboboxOption>
                        }
                    }
                </ComboboxOptions>
            </Transition>
        </div>
    </Combobox>
</div>

@code 
{
    
}